// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AcceptProposal extends ethereum.Event {
  get params(): AcceptProposal__Params {
    return new AcceptProposal__Params(this);
  }
}

export class AcceptProposal__Params {
  _event: AcceptProposal;

  constructor(event: AcceptProposal) {
    this._event = event;
  }

  get sERC20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Buyout extends ethereum.Event {
  get params(): Buyout__Params {
    return new Buyout__Params(this);
  }
}

export class Buyout__Params {
  _event: Buyout;

  constructor(event: Buyout) {
    this._event = event;
  }

  get sERC20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Claim extends ethereum.Event {
  get params(): Claim__Params {
    return new Claim__Params(this);
  }
}

export class Claim__Params {
  _event: Claim;

  constructor(event: Claim) {
    this._event = event;
  }

  get sERC20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get holder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CreateProposal extends ethereum.Event {
  get params(): CreateProposal__Params {
    return new CreateProposal__Params(this);
  }
}

export class CreateProposal__Params {
  _event: CreateProposal;

  constructor(event: CreateProposal) {
    this._event = event;
  }

  get sERC20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class DisableEscape extends ethereum.Event {
  get params(): DisableEscape__Params {
    return new DisableEscape__Params(this);
  }
}

export class DisableEscape__Params {
  _event: DisableEscape;

  constructor(event: DisableEscape) {
    this._event = event;
  }

  get sERC20(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EnableEscape extends ethereum.Event {
  get params(): EnableEscape__Params {
    return new EnableEscape__Params(this);
  }
}

export class EnableEscape__Params {
  _event: EnableEscape;

  constructor(event: EnableEscape) {
    this._event = event;
  }

  get sERC20(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EnableFlashBuyout extends ethereum.Event {
  get params(): EnableFlashBuyout__Params {
    return new EnableFlashBuyout__Params(this);
  }
}

export class EnableFlashBuyout__Params {
  _event: EnableFlashBuyout;

  constructor(event: EnableFlashBuyout) {
    this._event = event;
  }

  get sERC20(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Escape extends ethereum.Event {
  get params(): Escape__Params {
    return new Escape__Params(this);
  }
}

export class Escape__Params {
  _event: Escape;

  constructor(event: Escape) {
    this._event = event;
  }

  get sERC20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get beneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get data(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Register extends ethereum.Event {
  get params(): Register__Params {
    return new Register__Params(this);
  }
}

export class Register__Params {
  _event: Register;

  constructor(event: Register) {
    this._event = event;
  }

  get sERC20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get guardian(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reserve(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get multiplier(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get opening(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RejectProposal extends ethereum.Event {
  get params(): RejectProposal__Params {
    return new RejectProposal__Params(this);
  }
}

export class RejectProposal__Params {
  _event: RejectProposal;

  constructor(event: RejectProposal) {
    this._event = event;
  }

  get sERC20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SetBank extends ethereum.Event {
  get params(): SetBank__Params {
    return new SetBank__Params(this);
  }
}

export class SetBank__Params {
  _event: SetBank;

  constructor(event: SetBank) {
    this._event = event;
  }

  get bank(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetProtocolFee extends ethereum.Event {
  get params(): SetProtocolFee__Params {
    return new SetProtocolFee__Params(this);
  }
}

export class SetProtocolFee__Params {
  _event: SetProtocolFee;

  constructor(event: SetProtocolFee) {
    this._event = event;
  }

  get protocolFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WithdrawProposal extends ethereum.Event {
  get params(): WithdrawProposal__Params {
    return new WithdrawProposal__Params(this);
  }
}

export class WithdrawProposal__Params {
  _event: WithdrawProposal;

  constructor(event: WithdrawProposal) {
    this._event = event;
  }

  get sERC20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Broker__priceOfForResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue(): BigInt {
    return this.value0;
  }

  getCollateral(): BigInt {
    return this.value1;
  }
}

export class Broker__proposalForResult {
  value0: i32;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: i32,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getState(): i32 {
    return this.value0;
  }

  getBuyer(): Address {
    return this.value1;
  }

  getValue(): BigInt {
    return this.value2;
  }

  getCollateral(): BigInt {
    return this.value3;
  }

  getExpiration(): BigInt {
    return this.value4;
  }
}

export class Broker__saleOfResult {
  value0: i32;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: boolean;

  constructor(
    value0: i32,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getState(): i32 {
    return this.value0;
  }

  getGuardian(): Address {
    return this.value1;
  }

  getReserve(): BigInt {
    return this.value2;
  }

  getMultiplier(): BigInt {
    return this.value3;
  }

  getOpening(): BigInt {
    return this.value4;
  }

  getStock(): BigInt {
    return this.value5;
  }

  getNbOfProposals(): BigInt {
    return this.value6;
  }

  getFlash(): boolean {
    return this.value7;
  }

  getEscape(): boolean {
    return this.value8;
  }
}

export class Broker extends ethereum.SmartContract {
  static bind(address: Address): Broker {
    return new Broker("Broker", address);
  }

  DECIMALS(): BigInt {
    let result = super.call("DECIMALS", "DECIMALS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DECIMALS", "DECIMALS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ESCAPE_ROLE(): Bytes {
    let result = super.call("ESCAPE_ROLE", "ESCAPE_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ESCAPE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ESCAPE_ROLE", "ESCAPE_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  HUNDRED(): BigInt {
    let result = super.call("HUNDRED", "HUNDRED():(uint256)", []);

    return result[0].toBigInt();
  }

  try_HUNDRED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("HUNDRED", "HUNDRED():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_TIMELOCK(): BigInt {
    let result = super.call(
      "MINIMUM_TIMELOCK",
      "MINIMUM_TIMELOCK():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MINIMUM_TIMELOCK(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MINIMUM_TIMELOCK",
      "MINIMUM_TIMELOCK():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REGISTER_ROLE(): Bytes {
    let result = super.call("REGISTER_ROLE", "REGISTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_REGISTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "REGISTER_ROLE",
      "REGISTER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  bank(): Address {
    let result = super.call("bank", "bank():(address)", []);

    return result[0].toAddress();
  }

  try_bank(): ethereum.CallResult<Address> {
    let result = super.tryCall("bank", "bank():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  issuer(): Address {
    let result = super.call("issuer", "issuer():(address)", []);

    return result[0].toAddress();
  }

  try_issuer(): ethereum.CallResult<Address> {
    let result = super.tryCall("issuer", "issuer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceOfFor(sERC20: Address, buyer: Address): Broker__priceOfForResult {
    let result = super.call(
      "priceOfFor",
      "priceOfFor(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(sERC20), ethereum.Value.fromAddress(buyer)]
    );

    return new Broker__priceOfForResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_priceOfFor(
    sERC20: Address,
    buyer: Address
  ): ethereum.CallResult<Broker__priceOfForResult> {
    let result = super.tryCall(
      "priceOfFor",
      "priceOfFor(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(sERC20), ethereum.Value.fromAddress(buyer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Broker__priceOfForResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  proposalFor(sERC20: Address, proposalId: BigInt): Broker__proposalForResult {
    let result = super.call(
      "proposalFor",
      "proposalFor(address,uint256):(uint8,address,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(sERC20),
        ethereum.Value.fromUnsignedBigInt(proposalId)
      ]
    );

    return new Broker__proposalForResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_proposalFor(
    sERC20: Address,
    proposalId: BigInt
  ): ethereum.CallResult<Broker__proposalForResult> {
    let result = super.tryCall(
      "proposalFor",
      "proposalFor(address,uint256):(uint8,address,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(sERC20),
        ethereum.Value.fromUnsignedBigInt(proposalId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Broker__proposalForResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  protocolFee(): BigInt {
    let result = super.call("protocolFee", "protocolFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_protocolFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("protocolFee", "protocolFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleOf(sERC20: Address): Broker__saleOfResult {
    let result = super.call(
      "saleOf",
      "saleOf(address):(uint8,address,uint256,uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromAddress(sERC20)]
    );

    return new Broker__saleOfResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toBoolean()
    );
  }

  try_saleOf(sERC20: Address): ethereum.CallResult<Broker__saleOfResult> {
    let result = super.tryCall(
      "saleOf",
      "saleOf(address):(uint8,address,uint256,uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromAddress(sERC20)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Broker__saleOfResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toBoolean()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vault_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get issuer_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get bank_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get protocolFee_(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class _escape_Call extends ethereum.Call {
  get inputs(): _escape_Call__Inputs {
    return new _escape_Call__Inputs(this);
  }

  get outputs(): _escape_Call__Outputs {
    return new _escape_Call__Outputs(this);
  }
}

export class _escape_Call__Inputs {
  _call: _escape_Call;

  constructor(call: _escape_Call) {
    this._call = call;
  }

  get sERC20s(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get beneficiaries(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get datas(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class _escape_Call__Outputs {
  _call: _escape_Call;

  constructor(call: _escape_Call) {
    this._call = call;
  }
}

export class AcceptProposalCall extends ethereum.Call {
  get inputs(): AcceptProposalCall__Inputs {
    return new AcceptProposalCall__Inputs(this);
  }

  get outputs(): AcceptProposalCall__Outputs {
    return new AcceptProposalCall__Outputs(this);
  }
}

export class AcceptProposalCall__Inputs {
  _call: AcceptProposalCall;

  constructor(call: AcceptProposalCall) {
    this._call = call;
  }

  get sERC20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AcceptProposalCall__Outputs {
  _call: AcceptProposalCall;

  constructor(call: AcceptProposalCall) {
    this._call = call;
  }
}

export class BuyoutCall extends ethereum.Call {
  get inputs(): BuyoutCall__Inputs {
    return new BuyoutCall__Inputs(this);
  }

  get outputs(): BuyoutCall__Outputs {
    return new BuyoutCall__Outputs(this);
  }
}

export class BuyoutCall__Inputs {
  _call: BuyoutCall;

  constructor(call: BuyoutCall) {
    this._call = call;
  }

  get sERC20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BuyoutCall__Outputs {
  _call: BuyoutCall;

  constructor(call: BuyoutCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get sERC20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class CreateProposalCall extends ethereum.Call {
  get inputs(): CreateProposalCall__Inputs {
    return new CreateProposalCall__Inputs(this);
  }

  get outputs(): CreateProposalCall__Outputs {
    return new CreateProposalCall__Outputs(this);
  }
}

export class CreateProposalCall__Inputs {
  _call: CreateProposalCall;

  constructor(call: CreateProposalCall) {
    this._call = call;
  }

  get sERC20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lifespan(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateProposalCall__Outputs {
  _call: CreateProposalCall;

  constructor(call: CreateProposalCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DisableEscapeCall extends ethereum.Call {
  get inputs(): DisableEscapeCall__Inputs {
    return new DisableEscapeCall__Inputs(this);
  }

  get outputs(): DisableEscapeCall__Outputs {
    return new DisableEscapeCall__Outputs(this);
  }
}

export class DisableEscapeCall__Inputs {
  _call: DisableEscapeCall;

  constructor(call: DisableEscapeCall) {
    this._call = call;
  }

  get sERC20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableEscapeCall__Outputs {
  _call: DisableEscapeCall;

  constructor(call: DisableEscapeCall) {
    this._call = call;
  }
}

export class EnableEscapeCall extends ethereum.Call {
  get inputs(): EnableEscapeCall__Inputs {
    return new EnableEscapeCall__Inputs(this);
  }

  get outputs(): EnableEscapeCall__Outputs {
    return new EnableEscapeCall__Outputs(this);
  }
}

export class EnableEscapeCall__Inputs {
  _call: EnableEscapeCall;

  constructor(call: EnableEscapeCall) {
    this._call = call;
  }

  get sERC20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableEscapeCall__Outputs {
  _call: EnableEscapeCall;

  constructor(call: EnableEscapeCall) {
    this._call = call;
  }
}

export class EnableFlashBuyoutCall extends ethereum.Call {
  get inputs(): EnableFlashBuyoutCall__Inputs {
    return new EnableFlashBuyoutCall__Inputs(this);
  }

  get outputs(): EnableFlashBuyoutCall__Outputs {
    return new EnableFlashBuyoutCall__Outputs(this);
  }
}

export class EnableFlashBuyoutCall__Inputs {
  _call: EnableFlashBuyoutCall;

  constructor(call: EnableFlashBuyoutCall) {
    this._call = call;
  }

  get sERC20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableFlashBuyoutCall__Outputs {
  _call: EnableFlashBuyoutCall;

  constructor(call: EnableFlashBuyoutCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get sERC20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get guardian(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get reserve(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get multiplier(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get timelock(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get flash(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get escape(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class RejectProposalCall extends ethereum.Call {
  get inputs(): RejectProposalCall__Inputs {
    return new RejectProposalCall__Inputs(this);
  }

  get outputs(): RejectProposalCall__Outputs {
    return new RejectProposalCall__Outputs(this);
  }
}

export class RejectProposalCall__Inputs {
  _call: RejectProposalCall;

  constructor(call: RejectProposalCall) {
    this._call = call;
  }

  get sERC20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RejectProposalCall__Outputs {
  _call: RejectProposalCall;

  constructor(call: RejectProposalCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetBankCall extends ethereum.Call {
  get inputs(): SetBankCall__Inputs {
    return new SetBankCall__Inputs(this);
  }

  get outputs(): SetBankCall__Outputs {
    return new SetBankCall__Outputs(this);
  }
}

export class SetBankCall__Inputs {
  _call: SetBankCall;

  constructor(call: SetBankCall) {
    this._call = call;
  }

  get bank_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBankCall__Outputs {
  _call: SetBankCall;

  constructor(call: SetBankCall) {
    this._call = call;
  }
}

export class SetProtocolFeeCall extends ethereum.Call {
  get inputs(): SetProtocolFeeCall__Inputs {
    return new SetProtocolFeeCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeCall__Outputs {
    return new SetProtocolFeeCall__Outputs(this);
  }
}

export class SetProtocolFeeCall__Inputs {
  _call: SetProtocolFeeCall;

  constructor(call: SetProtocolFeeCall) {
    this._call = call;
  }

  get protocolFee_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolFeeCall__Outputs {
  _call: SetProtocolFeeCall;

  constructor(call: SetProtocolFeeCall) {
    this._call = call;
  }
}

export class WithdrawProposalCall extends ethereum.Call {
  get inputs(): WithdrawProposalCall__Inputs {
    return new WithdrawProposalCall__Inputs(this);
  }

  get outputs(): WithdrawProposalCall__Outputs {
    return new WithdrawProposalCall__Outputs(this);
  }
}

export class WithdrawProposalCall__Inputs {
  _call: WithdrawProposalCall;

  constructor(call: WithdrawProposalCall) {
    this._call = call;
  }

  get sERC20(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get proposalId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawProposalCall__Outputs {
  _call: WithdrawProposalCall;

  constructor(call: WithdrawProposalCall) {
    this._call = call;
  }
}
