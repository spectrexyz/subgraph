// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("collection", Value.fromBytes(Bytes.empty()));
    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NFT entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): Bytes {
    let value = this.get("collection");
    return value!.toBytes();
  }

  set collection(value: Bytes) {
    this.set("collection", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class Spectre extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("NFT", Value.fromString(""));
    this.set("sERC20", Value.fromString(""));
    this.set("state", Value.fromString(""));
    this.set("vault", Value.fromBytes(Bytes.empty()));
    this.set("broker", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Spectre entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Spectre entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Spectre", id.toString(), this);
    }
  }

  static load(id: string): Spectre | null {
    return changetype<Spectre | null>(store.get("Spectre", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get NFT(): string {
    let value = this.get("NFT");
    return value!.toString();
  }

  set NFT(value: string) {
    this.set("NFT", Value.fromString(value));
  }

  get sERC20(): string {
    let value = this.get("sERC20");
    return value!.toString();
  }

  set sERC20(value: string) {
    this.set("sERC20", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    return value!.toBytes();
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }

  get broker(): Bytes {
    let value = this.get("broker");
    return value!.toBytes();
  }

  set broker(value: Bytes) {
    this.set("broker", Value.fromBytes(value));
  }

  get sale(): string | null {
    let value = this.get("sale");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sale(value: string | null) {
    if (!value) {
      this.unset("sale");
    } else {
      this.set("sale", Value.fromString(<string>value));
    }
  }
}

export class sERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("spectre", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save sERC20 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save sERC20 entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("sERC20", id.toString(), this);
    }
  }

  static load(id: string): sERC20 | null {
    return changetype<sERC20 | null>(store.get("sERC20", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get spectre(): string {
    let value = this.get("spectre");
    return value!.toString();
  }

  set spectre(value: string) {
    this.set("spectre", Value.fromString(value));
  }
}

export class Sale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("spectre", Value.fromString(""));
    this.set("state", Value.fromString(""));
    this.set("guardian", Value.fromBytes(Bytes.empty()));
    this.set("reserve", Value.fromBigInt(BigInt.zero()));
    this.set("multiplier", Value.fromBigInt(BigInt.zero()));
    this.set("opening", Value.fromBigInt(BigInt.zero()));
    this.set("stock", Value.fromBigInt(BigInt.zero()));
    this.set("nbOfProposals", Value.fromBigInt(BigInt.zero()));
    this.set("flash", Value.fromBoolean(false));
    this.set("escape", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Sale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Sale entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Sale", id.toString(), this);
    }
  }

  static load(id: string): Sale | null {
    return changetype<Sale | null>(store.get("Sale", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get spectre(): string {
    let value = this.get("spectre");
    return value!.toString();
  }

  set spectre(value: string) {
    this.set("spectre", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value!.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get guardian(): Bytes {
    let value = this.get("guardian");
    return value!.toBytes();
  }

  set guardian(value: Bytes) {
    this.set("guardian", Value.fromBytes(value));
  }

  get reserve(): BigInt {
    let value = this.get("reserve");
    return value!.toBigInt();
  }

  set reserve(value: BigInt) {
    this.set("reserve", Value.fromBigInt(value));
  }

  get multiplier(): BigInt {
    let value = this.get("multiplier");
    return value!.toBigInt();
  }

  set multiplier(value: BigInt) {
    this.set("multiplier", Value.fromBigInt(value));
  }

  get opening(): BigInt {
    let value = this.get("opening");
    return value!.toBigInt();
  }

  set opening(value: BigInt) {
    this.set("opening", Value.fromBigInt(value));
  }

  get stock(): BigInt {
    let value = this.get("stock");
    return value!.toBigInt();
  }

  set stock(value: BigInt) {
    this.set("stock", Value.fromBigInt(value));
  }

  get nbOfProposals(): BigInt {
    let value = this.get("nbOfProposals");
    return value!.toBigInt();
  }

  set nbOfProposals(value: BigInt) {
    this.set("nbOfProposals", Value.fromBigInt(value));
  }

  get flash(): boolean {
    let value = this.get("flash");
    return value!.toBoolean();
  }

  set flash(value: boolean) {
    this.set("flash", Value.fromBoolean(value));
  }

  get escape(): boolean {
    let value = this.get("escape");
    return value!.toBoolean();
  }

  set escape(value: boolean) {
    this.set("escape", Value.fromBoolean(value));
  }
}
